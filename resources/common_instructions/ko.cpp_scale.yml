---
comment: ''
introduction_md: |
  - Git 저장소에 저장되어있는 작업물만 평가합니다.

  - Git 저장소가 지금 평가하는 학생소유의 저장소인지 확인하십시오. 
  	작업물이 연관이 있는 것인지 확인하고, 빈 폴더에서 "git clone"으로 작업물을 clone했는 지 확인하세요.

  - 악의적인 alias가 사용되어있는지 확인해보십시오. 
  	"본인"의 Git 저장소가 아닌 다른 곳에 있는 파일을 평가해서는 안됩니다.

  - 뜻밖의 상황을 피하기 위해 평가에 사용된 테스트 툴 및 테스트코드는 
  	평가받는 학생과 평가하는 학생이 같이 확인 하여야 합니다.

  - 만약 평가하는 학생이 해당 프로젝트를 완료하지 않았다면, 
  	평가받는 학생은 필수적으로 프로젝트의 관한 모든 것을 평가하는 학생에게 설명해주어야 합니다.

  - 비어있는 Git 저장소, 실행되지 않는 프로그램, Norm 오류, 부정행위 등은 아래에 있는 flags를 이용하여 표시 할 수 있습니다. 
  	이런 경우, 동료평가는 바로 종료되고, 프로젝트는 0점(부정행위의 경우 -42점)처리 됩니다.
    프로젝트 실패의 이유가 부정행위가 아니라면, (결과물이  완벽하지가 않더라도) 같은 실수를 미래에 반복하지 않도록 
    어느 부분에서 실수를 했는지, 왜 실수가 발생 되었는지 등  결과물에 대해 이야기 해보는 것을 추천합니다.
    
  - 평가중에 일어나는 프로그램의 segfault, 의도치 않은 행동, 제어되지 않은 오류/종료는 모두 0점 사유입니다. 
  	알맞는 flag를 표시하세요. 
  	설정파일(만약 존재한다면) 외에 다른 소스파일은 절대로 수정할 수 없습니다. 
  	만약 수정하고 싶다면 평가를 받는 학생과 충분히 왜 그래야 하는지 상의 하고 상호협의 하에 해야합니다.

  - 메모리 누수도 꼭 확인해야합니다. 
	heap에 할당되어 있는 메모리는 프로그램이 종료되기 전에 알맞게 해제해야 합니다. 
	메모리 누수를 확인하는 툴은 모두 사용이 가능합니다. (leaks, valgrind, e_fence 등) 
	메모리 누수가 있다면 알맞은 flag를 표시하세요.

disclaimer_md: |
  Please respect the following rules:
  - 공손하고 건설적인 분위기를 유지해주세요. 커뮤니티의 안녕이 여기에
    달려있습니다.

  - 작업물에 대한 문제, 오류를 찾아보세요. 찾은 문제, 오류에 대해 충분히
    상의하고 토론해보세요.

  - 어떤 프로젝트에 대한 범위, 기능이 동료의 해석에 따라 다를 수 있습니다.
    언제나 열린마음으로 최대한 정직하게 평가를 해주세요. 42의 교육철학은
    동료평가가 잘 이루어졌을때만 그 가치가 유효합니다.

guidelines_md: |
    -Wall -Wextra -Werror 플래그와 함께 clang++ 로 컴파일 합니다.
    이 프로젝트는 C++98을 따르며 C++20 의 멤버함수, 컨테이너는 요구되지 않습니다.

    다음 중 하나라도 해당이 된다면 그 과제는 평가하지 않습니다.
      - 헤더파일에 구현되어 있는 함수
      - Makefile이 clang++이 아닌 컴파일러를 사용하거나 플래그 없이 컴파일 할 때

    다음 중 하나라도 해당이 된다면 해당 프로젝트는 Forbidden Function플래그를 부여합니다.
      - "C"의 함수를 사용 (*alloc, *printf, free)
      - 과제에서 혀용하지 않은 함수를 사용
      - "using namespace" 또는 "friend"를 사용
      - 외부 라이브러리, 또는 C++20 기능 사용
      - 이미 존재하는 컨테이너, 함수를 사용하여, 컨테이너를 구현한 경우
