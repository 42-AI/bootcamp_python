
comment: ''
introduction_md: |
  다음 규칙을 준수하십시오:

  - 평가 과정 동안 정중하고 공손하며 존중하며 건설적인 태도를 유지해야합니다. 
    커뮤니티의 안녕은 당신에게 달려있습니다.

  - 평가할 사람 (혹은 그룹)과 함께 작업물의 기능적, 기술적 문제점을 찾으십시오.  
    시간을 들여 파악한 문제점에 대해 논의하고 토론하십시오.

  - 모두의 프로젝트의 지침과 기능을 이해하는 방법이 약간은 다를 수 있음을 고려해야합니다. 
    항상 열린 마음으로 대하고 최대한 정직하게 점수를 매기십시오. 
    42의 교육은 동료 평가가 진지하게 수행되는 경우에만 유효합니다.


disclaimer_md: ''

guidelines_md: |
  - 학생 또는 그룹의 Git 저장소에 있는 작업물만 평가하십시오.

  - Git 저장소가 학생 또는 그룹에 속한 것이 맞는 지 재확인하십시오.
	또 해당 프로젝트를 위한 작업물이 맞는지 확인한 후 빈 폴더에서 "git clone"이 되었는지 확인하십시오.

  - 당신을 속여 공식 Git 저장소의 파일 이외의 다른 것을 평가하게 하기 위해 
	악의적으로 'Alias' (단축명령)을 사용하지 않았는지 확인하십시오.

  - 평가를 용이하게 하기 위해 사용되는 스크립트가 있다면 평가에 참가하는 학생 모두가 주의 깊게 검토해야합니다.

  - 아직 특정 프로젝트를 완료하지 않은 학생이 평가하는 경우, 이 학생은 평가 전 프로젝트 문서를 반드시 읽어야합니다.

  - 이 스케일에서 제공하는 플래그를 사용하여 빈 저장소, 작동하지 않는 프로그램, norm 에러, 부정 행위 등을 표시하십시오. 
	이 경우, 평가가 끝난 후 최종 성적이 0 (부정 행위의 경우 -42)가 됩니다. 
	그러나 부정행위의 경우를 제외한 경우, 이 실패의 원인을 분석하고 향후 동일한 실수를 반복하지 않을 수 있도록 
	작업물에 대해 (완료하지 않은 경우에도) 논의 하십시오.
  
  - 평가 시간 동안, segfault 혹은 다른 이유로 프로그램이 조기에 통제되지 않거나 예기치 않게 종료된다면 최종 성적은 0입니다. 
	적절한 플래그를 사용하여 표시하십시오.
	구성 파일 (존재할 경우)를 제외한 다른 파일을 편집해서는 안됩니다.
	만약 파일을 편집하고 싶다면, 시간을 들여 평가를 받는 학생에게 사유를 명시하고 두 사람 모두 이에 동의해야합니다.

  - 또한 메모리 누수가 없는지 확인해야합니다. 힙에 할당 된 모든 메모리는 종료되기 전에 올바르게 해제되여야합니다. 
	leaks, valgrind 또는 e_fence와 같이 다양한 도구를 이용하여 검사할 수 있습니다. 
	메모리 누수가 발생하는 경우 적절한 플래그를 선택하십시오.


- name: Bonus
  position: 2


  description: |
    필수 항목을 우수하게 끝마친 경우에만 보너스 부분을 검토합니다. 
    즉, 필수 항목을 시작부터 끝까지 완료해야하며, 왜곡되거나 잘못된 접근에도 오류가 없어야합니다. 
    따라서 필수 항목에서 모든 점수를 얻지 못했다면 이 부분은 완전히 무시됩니다. 


